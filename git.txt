==== удалённый репозиторий ====

main.py
funcs.py    шаг 5: обновление содержимого файла



шаг 1: clone — копирование файлов из УР в выбранный каталог в локальной файловой системе, создание в выбранном каталоге скрытого каталога .git с конфигурационными файлами ЛР1

==== локальный репозиторий 1 ====

main.py
funcs.py    шаг 3: внесение изменений первым разработчиком
            
            шаг 5: commit — фиксация (регистрация) изменений, внесённых первым разработчиком, в ЛР1
            
            шаг 7: push — отправка всех зарегистрированных изменений в УР



шаг 2: clone — копирование файлов из УР в выбранный каталог в локальной файловой системе, создание в выбранном каталоге скрытого каталога .git с конфигурационными файлами ЛР2

==== локальный репозиторий 2 ====

main.py
funcs.py    шаг 4: внесение изменений вторым разработчиком
            
            шаг 6: commit — фиксация (регистрация) изменений, внесённых вторым разработчиком, в ЛР2
            
            шаг 8: push — отправка всех зарегистрированных изменений в УР
                
                возникает конфликт изменений из-за разницы между состоянием УР во время шага 2 и текущим состоянием УР вследствие шага 7
                
                разрешение конфликта
                
                шаг 9: fetch — копирование в ЛР2 информации об изменениях в УР (получение новых коммитов)
                
                    первая версия funcs.py: получена из УР
                    вторая версия funcs.py: выполнена в текущем ЛР2
                
                ЕСЛИ изменения в разных версиях касаются разных строк ТО:
                
                    шаг 10: merge — автоматическое слияние версий funcs.py (принимаются изменения из обеих версий)
                    
                ИНАЧЕ:
                
                    шаг 10: merge — ручное слияние версий (решение о принятии тех или иных изменний должно быть принято человеком — вторым разработчиком)

                шаг 11: push — отправка результата слияния в УР
